import {
  Button,
  Card,
  Grid,
  Input,
  Loading,
  Row,
  Spacer,
  Text,
} from "@nextui-org/react";
import { useAuthenticationStatus, useChangePassword } from "@nhost/nextjs";
import Head from "next/head";
import * as Yup from "yup";
import React, { useState } from "react";
import toast, { Toaster } from "react-hot-toast";
import NavBar from "../../components/NavBar";
import LoginSvg from "../../components/UI/SVG/login";
import { useForm } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import { useRouter } from "next/router";

const schema = Yup.object({
  newPassword: Yup.string()
    .min(8, "Password must be 8 characters long")
    .required("Password is required"),
  confirmedPassword: Yup.string().oneOf(
    [Yup.ref("newPassword"), null],
    "Passwords must match"
  ),
});

interface IChangePasswordFormValues {
  newPassword: string;
  confirmedPassword: string;
}

const ChangePassword = () => {
  const { push } = useRouter();

  const [loading, setLoading] = useState<boolean>(false);
  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm<IChangePasswordFormValues>({
    defaultValues: {
      newPassword: "",
      confirmedPassword: "",
    },
    resolver: yupResolver(schema),
  });
  const { changePassword, isSuccess, isError, error } = useChangePassword();
  if (isError) {
    console.log(error?.message);
  }

  const handleFormSubmit = async (values: IChangePasswordFormValues) => {
    try {
      setLoading(true);
      if (values.newPassword === values.confirmedPassword) {
        await changePassword(values.confirmedPassword);
        toast.success("Password Successfully Changed.");
      }
      setLoading(false);
    } catch (error) {
      //@ts-ignore
      toast.error(error?.message, { duration: 5000 });
    } finally {
      reset();
    }
  };
  if (isSuccess) {
    setTimeout(() => push("/all-meetups"), 3000);
  }
  return (
    <>
      <Toaster />
      <Head>
        <title>Let&apos;s Link | About</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <NavBar />

      <Grid.Container gap={2} justify="center">
        <Grid xs={6} justify={"center"}>
          <Card css={{ justifyContent: "center", alignItems: "center" }}>
            <Card.Header css={{ justifyContent: "center", py: 30 }}>
              <Text h3>Change Password</Text>
            </Card.Header>
            <form onSubmit={handleSubmit(handleFormSubmit)}>
              <Input.Password
                bordered
                fullWidth
                color="primary"
                size="lg"
                placeholder="New Password"
                {...register("newPassword")}
                css={{ mb: 20 }}
              />
              {errors.newPassword ? (
                <Text color="error">{errors.newPassword.message}</Text>
              ) : null}
              <Input.Password
                bordered
                fullWidth
                color="primary"
                size="lg"
                placeholder="Confirm Password"
                {...register("confirmedPassword")}
                css={{ mb: 20 }}
              />
              {errors.confirmedPassword ? (
                <Text color="error">{errors.confirmedPassword.message}</Text>
              ) : null}
              <Row justify="center">
                <Button type="submit" color="secondary" shadow>
                  {loading ? (
                    <Row justify="space-evenly">
                      <Text color={"white"}>Loading</Text>
                      <Spacer />
                      <Loading type="spinner" color={"white"} size="lg" />
                    </Row>
                  ) : (
                    "Reset Password"
                  )}
                </Button>
              </Row>
            </form>
          </Card>
        </Grid>
        <Grid xs={6}>
          <LoginSvg />
        </Grid>
      </Grid.Container>
    </>
  );
};

export default ChangePassword;
